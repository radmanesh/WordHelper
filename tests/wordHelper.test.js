// // Generated by Copilot

// /**
//  * @description Simple test runner function
//  * @param {string} testName - Name of the test case
//  * @param {Function} testFn - Test function to run
//  */
// function test(testName, testFn) {
//     try {
//         testFn();
//         console.log(`✅ ${testName}`);
//     } catch (error) {
//         console.error(`❌ ${testName}`);
//         console.error(error);
//     }
// }

// /**
//  * @description Async test runner function
//  * @param {string} testName - Name of the test case
//  * @param {Function} testFn - Async test function to run
//  */
// async function testAsync(testName, testFn) {
//     try {
//         await testFn();
//         console.log(`✅ ${testName}`);
//     } catch (error) {
//         console.error(`❌ ${testName}`);
//         console.error(error);
//     }
// }

// /**
//  * @description Assertion function
//  * @param {boolean} condition - Condition to check
//  * @param {string} message - Error message if assertion fails
//  */
// function expect(condition, message) {
//     if (!condition) {
//         throw new Error(message || 'Assertion failed');
//     }
// }

// // Test cases for canFormWord
// test('canFormWord should return true for valid words', () => {
//     expect(canFormWord('cat', 'cat') === true, 'Simple word match failed');
//     expect(canFormWord('cat', 'tac') === true, 'Anagram match failed');
//     expect(canFormWord('cat', 'catch') === true, 'Subset match failed');
//     expect(canFormWord('hello', 'hello world') === true, 'Longer string match failed');
// });

// test('canFormWord should return false for invalid words', () => {
//     expect(canFormWord('cat', 'ct') === false, 'Missing letter check failed');
//     expect(canFormWord('hello', 'hell') === false, 'Insufficient letters failed');
//     expect(canFormWord('zoo', 'zone') === false, 'Double letter check failed');
// });

// test('canFormWord should handle edge cases', () => {
//     expect(canFormWord('', '') === true, 'Empty string case failed');
//     expect(canFormWord('', 'abc') === true, 'Empty word case failed');
//     expect(canFormWord('A', 'a') === true, 'Case sensitivity failed');
// });

// // Test cases for findPossibleWords
// test('findPossibleWords should find all valid words', () => {
//     const testDictionary = ['cat', 'act', 'dog', 'good', 'rat'];

//     const result1 = findPossibleWords(testDictionary, 'cat');
//     expect(result1.length === 2, 'Should find "cat" and "act"');
//     expect(result1.includes('cat'), 'Should include "cat"');
//     expect(result1.includes('act'), 'Should include "act"');

//     const result2 = findPossibleWords(testDictionary, 'god');
//     expect(result2.length === 1, 'Should find only "dog"');
//     expect(result2.includes('dog'), 'Should include "dog"');
// });

// test('findPossibleWords should handle empty cases', () => {
//     const testDictionary = ['cat', 'dog'];

//     const result1 = findPossibleWords([], 'cat');
//     expect(result1.length === 0, 'Empty dictionary should return empty array');

//     const result2 = findPossibleWords(testDictionary, '');
//     expect(result2.length === 0, 'Empty letters should return empty array');
// });

// // Integration test with dictionary file
// testAsync('should find words from actual dictionary file', async () => {
//     const dictionary = await loadDictionary();
//     console.log('Loaded dictionary contents:', dictionary.length);
//     expect(dictionary.length > 0, 'Dictionary should not be empty');

//     // Test with known word that should be in dictionary
//     const result = findPossibleWords(dictionary, 'cat');
//     console.log(`Found ${result.length} words using 'cat' letters`);
//     expect(result.length > 0, 'Should find at least one word');
//     expect(result.includes('cat'), 'Should find the word "cat"');

//     // Test with more complex set of letters
//     const complexResult = findPossibleWords(dictionary, 'testing');
//     console.log(`Found ${complexResult.length} words using 'testing' letters`);
//     expect(complexResult.length > 0, 'Should find words from "testing" letters');
//     expect(
//         complexResult.some(word => word.length > 3),
//         'Should find words longer than 3 letters'
//     );
// });

// // Add this new test after other tests but before DOMContentLoaded
// testAsync('should work with reduced dictionary', async () => {
//     const dictionary = await loadDictionary();
//     console.log('Loaded dictionary contents:', dictionary);

//     // Test exact match
//     const result = findPossibleWords(dictionary, 'cat');
//     console.log('Testing with letters "cat"');
//     console.log('Dictionary being searched:', dictionary);
//     console.log('Found words:', result);

//     // Check if 'cat' is in dictionary and can be formed
//     const hasCat = dictionary.includes('cat');
//     const canFormCat = canFormWord('cat', 'cat');
//     console.log('Is "cat" in dictionary?', hasCat);
//     console.log('Can form "cat"?', canFormCat);

//     expect(result.includes('cat'), 'Should find the word "cat"');
// });

// // Run all tests when page loads
// document.addEventListener('DOMContentLoaded', () => {
//     console.log('Running tests...');
//     // Run sync tests
//     test('canFormWord should return true for valid words', () => {
//         expect(canFormWord('cat', 'cat') === true, 'Simple word match failed');
//         expect(canFormWord('cat', 'tac') === true, 'Anagram match failed');
//         expect(canFormWord('cat', 'catch') === true, 'Subset match failed');
//         expect(canFormWord('hello', 'hello world') === true, 'Longer string match failed');
//     });

//     test('canFormWord should return false for invalid words', () => {
//         expect(canFormWord('cat', 'ct') === false, 'Missing letter check failed');
//         expect(canFormWord('hello', 'hell') === false, 'Insufficient letters failed');
//         expect(canFormWord('zoo', 'zone') === false, 'Double letter check failed');
//     });

//     test('canFormWord should handle edge cases', () => {
//         expect(canFormWord('', '') === true, 'Empty string case failed');
//         expect(canFormWord('', 'abc') === true, 'Empty word case failed');
//         expect(canFormWord('A', 'a') === true, 'Case sensitivity failed');
//     });

//     test('findPossibleWords should find all valid words', () => {
//         const testDictionary = ['cat', 'act', 'dog', 'good', 'rat'];

//         const result1 = findPossibleWords(testDictionary, 'cat');
//         expect(result1.length === 2, 'Should find "cat" and "act"');
//         expect(result1.includes('cat'), 'Should include "cat"');
//         expect(result1.includes('act'), 'Should include "act"');

//         const result2 = findPossibleWords(testDictionary, 'god');
//         expect(result2.length === 1, 'Should find only "dog"');
//         expect(result2.includes('dog'), 'Should include "dog"');
//     });

//     test('findPossibleWords should handle empty cases', () => {
//         const testDictionary = ['cat', 'dog'];

//         const result1 = findPossibleWords([], 'cat');
//         expect(result1.length === 0, 'Empty dictionary should return empty array');

//         const result2 = findPossibleWords(testDictionary, '');
//         expect(result2.length === 0, 'Empty letters should return empty array');
//     });

//     // Run async tests
//     testAsync('Dictionary Integration Test Suite', async () => {
//         await testAsync(
//             'should find words from actual dictionary file',
//             async () => {
//                 const dictionary = await loadDictionary();
//                 expect(
//                     dictionary.length > 0,
//                     'Dictionary should not be empty'
//                 );

//                 const result = findPossibleWords(dictionary, 'cat');
//                 console.log(
//                     `Integration test: Found ${result.length} words ` +
//                     `using 'cat' letters`
//                 );
//                 expect(result.length > 0, 'Should find at least one word');
//             }
//         );
//     });
// });
